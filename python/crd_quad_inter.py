#!/home/pengfeil/AMBER/amber16/amber16/miniconda/bin/python
# Filename: crd_quad_inter.py
from __future__ import print_function
import parmed as pmd
from numpy import array
from optparse import OptionParser

parser = OptionParser("Usage:  -p topology_file -o output_file \n"
                      "        --rc react_crd --ts ts_crd --pc product_crd \n"
                      "        --prog program --img image_num --wind window_num")
parser.add_option("-p", dest="topfile", type='string',
                  help="Topology file name")
parser.add_option("-o", dest="output", type='string',
                  help="Output file name")
parser.add_option("--rc", dest="react_file", type='string',
                  help="Reactant coordinate file")
parser.add_option("--ts", dest="ts_file", type='string',
                  help="Transition state coordinate file")
parser.add_option("--pc", dest="prod_file", type='string',
                  help="Product coordinate file")
parser.add_option("--prog", dest="program", type='string',
                  help="Program: amber/charmm")
parser.add_option("--img", dest="images", type='float',
                  help="TOTAL image number")
parser.add_option("--wind", dest="window", type='int',
                  help="The window number")
(options, args) = parser.parse_args()

def cal_quad(y1, y2, y3, x):
    a = 2*y3 - 4*y2 + 2*y1
    b = 4*y2 - y3 - 3*y1
    c = y1
    y = a*x**2 + b*x + c
    return y

if options.program == 'amber':
    # Load the molecule
    inter_mol = pmd.load_file(options.topfile, options.react_file)
    reac_crd = pmd.amber.Rst7(options.react_file)
    ts_crd = pmd.amber.Rst7(options.ts_file)
    prod_crd = pmd.amber.Rst7(options.prod_file)
elif options.program == 'charmm':
    # Load the molecule
    # inter_mol = pmd.load_file(options.topfile)
    reac_crd = pmd.charmm.CharmmCrdFile(options.react_file)
    ts_crd = pmd.charmm.CharmmCrdFile(options.ts_file)
    prod_crd = pmd.charmm.CharmmCrdFile(options.prod_file)

# Perform the interpolation
for i in reac_crd.coordinates:
    pure_reac_crd = i
for i in ts_crd.coordinates:
    pure_ts_crd = i
for i in prod_crd.coordinates:
    pure_prod_crd = i

# lamada is the coordinate for a certain window
lamada = 1.0 / (options.images - 1.0) * (options.window - 1.0)

# For the quadratic interpolation, considers the funtion
# ax**2 + bx + c = y for the general function
# ax1**2 + bx1 + c = y1 for reactant structure
# ax2**2 + bx2 + c = y2 for transition state structure
# ax3**2 + bx3 + c = y3 for product state
# Then by solving the equation manually we can get:
# a = 2y3 - 4y2 + 2y1
# b = 4y2 - y3 - 3y1
# c = y1

inter_crd = []
for i in xrange(len(pure_reac_crd)):
    x = cal_quad(pure_reac_crd[i][0], pure_ts_crd[i][0], pure_prod_crd[i][0], lamada)
    y = cal_quad(pure_reac_crd[i][1], pure_ts_crd[i][1], pure_prod_crd[i][1], lamada)
    z = cal_quad(pure_reac_crd[i][2], pure_ts_crd[i][2], pure_prod_crd[i][2], lamada)
    xyz = (x, y, z)
    inter_crd.append(xyz)

# Print out the final crd file
if options.program == 'charmm':
    #inter_mol.save(options.output, format='charmmcrd', overwrite=True)
    atomno = reac_crd.atomno
    resno = reac_crd.resno
    resname = reac_crd.resname
    atname = reac_crd.atname
    segid = reac_crd.segid
    resid = reac_crd.resid
    weighting = reac_crd.weighting
    w_output = open(options.output, 'w')
    w_outpdb = open(options.output+'.pdb', 'w')
    print('* GENERATED BY PARMED (HTTPS://GITHUB.COM/PARMED/PARMED)\n', end='', file=w_output)
    print('*\n', end='', file=w_output)
    print('%10d  EXT\n' % len(atomno), end='', file=w_output)
    for i in xrange(len(atomno)):
        print('%10d%10d  %-8s  %-8s%20.10f%20.10f%20.10f  %-8s  '
               '%-8s%20.10f\n' % (atomno[i], resno[i], resname[i], atname[i], 
               inter_crd[i][0], inter_crd[i][1], inter_crd[i][2], segid[i],
               resid[i], weighting[i]), end='', file=w_output)
        if atname[i] == 3:
	    print("%-6s%5d %4s %-4s%1s%4d   %8.3f%8.3f%8.3f%6.2f%6.2f" %('ATOM', atomno[i], \
	          atname[i], resname[i], ' ', resid[i], inter_crd[i][0], inter_crd[i][1], \
                  inter_crd[i][2], 1.00, 0.00), file=w_outpdb)
        else:
            print("%-6s%5d %4s %-4s%1s%4d   %8.3f%8.3f%8.3f%6.2f%6.2f" %('ATOM', atomno[i], \
                  atname[i].center(4), resname[i], ' ', resid[i], inter_crd[i][0], inter_crd[i][1], \
                  inter_crd[i][2], 1.00, 0.00), file=w_outpdb)
    w_output.close()
    w_outpdb.close()
elif options.program == 'amber':
    inter_mol.positions = inter_crd
    inter_mol.coordinates = inter_crd
    inter_mol.save(options.output, format='rst7', overwrite=True)
    inter_mol.save(options.output+'.pdb', format='pdb', overwrite=True)

